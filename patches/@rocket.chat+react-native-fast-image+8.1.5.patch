diff --git a/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/.DS_Store b/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/.DS_Store
new file mode 100644
index 0000000..e076dd3
Binary files /dev/null and b/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/.DS_Store differ
diff --git a/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/dylanvann/.DS_Store b/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/dylanvann/.DS_Store
new file mode 100644
index 0000000..04013d4
Binary files /dev/null and b/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/dylanvann/.DS_Store differ
diff --git a/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageGlideModule.java b/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageGlideModule.java
index 6708bb8..6f8b08d 100644
--- a/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageGlideModule.java
+++ b/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageGlideModule.java
@@ -1,9 +1,30 @@
 package com.dylanvann.fastimage;
 
+import android.content.Context;
+
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Registry;
 import com.bumptech.glide.annotation.GlideModule;
 import com.bumptech.glide.module.AppGlideModule;
+import com.bumptech.glide.load.model.GlideUrl;
+import com.facebook.react.modules.network.OkHttpClientProvider;
+
+import java.io.InputStream;
+
+import okhttp3.OkHttpClient;
 
 // We need an AppGlideModule to be present for progress events to work.
 @GlideModule
 public final class FastImageGlideModule extends AppGlideModule {
+
+  @Override
+  public void registerComponents(Context context, Glide glide, Registry registry) {
+      OkHttpClient client = OkHttpClientProvider
+                .getOkHttpClient()
+                .newBuilder()
+                .build();
+
+      FastImageOkHttpUrlLoader.Factory factory = new FastImageOkHttpUrlLoader.Factory(client);
+      registry.replace(GlideUrl.class, InputStream.class, factory);
+  }
 }
diff --git a/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageOkHttpUrlLoader.java b/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageOkHttpUrlLoader.java
new file mode 100644
index 0000000..803fe61
--- /dev/null
+++ b/node_modules/@rocket.chat/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageOkHttpUrlLoader.java
@@ -0,0 +1,83 @@
+package com.dylanvann.fastimage;
+
+import androidx.annotation.NonNull;
+import com.bumptech.glide.load.Options;
+import com.bumptech.glide.load.model.GlideUrl;
+import com.bumptech.glide.load.model.ModelLoader;
+import com.bumptech.glide.load.model.ModelLoaderFactory;
+import com.bumptech.glide.load.model.MultiModelLoaderFactory;
+import com.bumptech.glide.integration.okhttp3.OkHttpStreamFetcher;
+import java.io.InputStream;
+import okhttp3.Call;
+import okhttp3.OkHttpClient;
+
+/** A simple model loader for fetching media over http/https using OkHttp. */
+public class FastImageOkHttpUrlLoader implements ModelLoader<GlideUrl, InputStream> {
+
+  private static Call.Factory client;
+
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
+  public FastImageOkHttpUrlLoader(@NonNull Call.Factory client) {
+    this.client = client;
+  }
+
+  public static void setOkHttpClient(Call.Factory okHttpClient) {
+    client = okHttpClient;
+  }
+
+  @Override
+  public boolean handles(@NonNull GlideUrl url) {
+    return true;
+  }
+
+  @Override
+  public LoadData<InputStream> buildLoadData(
+      @NonNull GlideUrl model, int width, int height, @NonNull Options options) {
+    return new LoadData<>(model, new OkHttpStreamFetcher(client, model));
+  }
+
+  /** The default factory for {@link FastImageOkHttpUrlLoader}s. */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
+  public static class Factory implements ModelLoaderFactory<GlideUrl, InputStream> {
+    private static volatile Call.Factory internalClient;
+    private final Call.Factory client;
+
+    private static Call.Factory getInternalClient() {
+      if (internalClient == null) {
+        synchronized (Factory.class) {
+          if (internalClient == null) {
+            internalClient = new OkHttpClient();
+          }
+        }
+      }
+      return internalClient;
+    }
+
+    /** Constructor for a new Factory that runs requests using a static singleton client. */
+    public Factory() {
+      this(getInternalClient());
+    }
+
+    /**
+     * Constructor for a new Factory that runs requests using given client.
+     *
+     * @param client this is typically an instance of {@code OkHttpClient}.
+     */
+    public Factory(@NonNull Call.Factory client) {
+      this.client = client;
+    }
+
+    @NonNull
+    @Override
+    public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {
+      return new FastImageOkHttpUrlLoader(client);
+    }
+
+    @Override
+    public void teardown() {
+      // Do nothing, this instance doesn't own the client.
+    }
+  }
+}
